{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "format:\n",
        "  revealjs:\n",
        "    logo: \"imagenes/logo_portada2.png\"\n",
        "    footer: \"Unidad de Gobiernos de Datos\"\n",
        "    slide-number: true\n",
        "    chalkboard: true\n",
        "    multiplex: false\n",
        "    preview-links: auto\n",
        "    page-layout: custom\n",
        "    scrollable: true\n",
        "    #navigation-mode: vertical\n",
        "    controls-layout: bottom-right\n",
        "    controls-tutorial: true\n",
        "    #transition: slide\n",
        "    background-transition: fade\n",
        "    highlight-style: github\n",
        "    code-line-numbers: true\n",
        "    code-overflow: wrap\n",
        "    html-math-method: katex\n",
        "    css: ine_quarto_styles.css\n",
        "    margin: 0\n",
        "    width: 1300\n",
        "    auto-stretch: false\n",
        "    fontsize: 20pt\n",
        "\n",
        "execute:\n",
        "  echo: true\n",
        "  warning: false\n",
        "  message: false\n",
        "---\n",
        "\n",
        "# \n",
        "\n",
        "[<img src=\"imagenes/logo_portada2.png\" width=\"40%\"/>]{.center-justified}\n",
        "\n",
        "[**Reproducibilidad II: control de versiones y orquestadores**]{.big-par .center-justified}\n",
        "\n",
        "\n",
        "[**Unidad de Gobierno de Datos**]{.big-par .center-justified}\n",
        "\n",
        "[**Julio 2025**]{.big-par .center-justified}\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Contenidos de la clase \n",
        "\n",
        "::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "![](imagenes/git.png){width=\"80\"}\n",
        "\n",
        "### Git\n",
        "\n",
        "::: {.incremental .medium-par}\n",
        "- Proyectos de R y rutas relativas  \n",
        "- ¿Qué es Git y para qué sirve?  \n",
        "- Principales conceptos asociados a Git  \n",
        "- Esquema de trabajo en git  \n",
        "- Conflictos de merge  \n",
        "- Árbol de commits  \n",
        "- Uso de ramas  \n",
        "- El .gitignore  \n",
        "- Recomendaciones sobre uso de git  \n",
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "![](imagenes/logo_targets.png){width=\"80\"}\n",
        "\n",
        "### Targets\n",
        "\n",
        "::: {.incremental .medium-par}\n",
        "- Qué son los orquestadores  \n",
        "- Qué es targets  \n",
        "- Aplicación en R  \n",
        ":::\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "## Objetivo de la clase\n",
        "\n",
        "- Quedar habilitado en el uso básico de git (git clone, git push, git pull)\n",
        "\n",
        ". . .\n",
        "\n",
        "::: {.callout-important}\n",
        "## MUY IMPORTANTE:\n",
        "\n",
        "- Deben trabajar desde sus computadores personales\n",
        "- Deben tener una cuenta en *github*\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "- Entender la utilidad de los orquestadores\n",
        "- Quedar habilitados en el uso básico de targets para orquestar sus proyectos.\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## ¿Qué es Git y para qué sirve? \n",
        "\n",
        "![](imagenes/documento_final.gif){fig-align=\"center\" width=\"30%\"}\n",
        "\n",
        "---\n",
        "\n",
        "## ¿Qué es Git y para qué sirve? {.medium-par}\n",
        "\n",
        ":::: {.columns}\n",
        "\n",
        "::: {.column width=\"85%\" }\n",
        "\n",
        "\n",
        "::: incremental\n",
        "- Es un sistema de control de versiones (VCS): nos dice quién hizo qué y cuándo en nuestro proyecto  \n",
        "\n",
        "\n",
        "\n",
        "- Permite que varias personas trabajen en un mismo proyecto sin molestarse unos a otros\n",
        "\n",
        "- Funciona como una máquina del tiempo: \n",
        "\n",
        ":::\n",
        "\n",
        "::: {.incremental}\n",
        "- Cada cierto tiempo sacamos una \"foto\" de todos los archivos del proyecto\n",
        "- Estas fotos no desaparecen\n",
        "- Siempre es posible volver a una foto anterior\n",
        "\n",
        ":::\n",
        "\n",
        "::: fragment\n",
        "Nos protege:\n",
        ":::\n",
        "\n",
        "\n",
        "::: {.incremental}\n",
        "- De nuestra propia estupidez\n",
        "- De fallas en el disco duro (podemos sincronizar nuestros cambios en la nube)\n",
        "\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column width=\"15%\"}\n",
        "![](imagenes/git.png){width=\"140\"}\n",
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Principales conceptos {.medium-par}\n",
        "\n",
        "Git nos permite navegar de manera \"sencilla\" por las distintas versiones de un archivo\n",
        "\n",
        "![](imagenes/diagrama.png){fig-align=\"center\" width=\"300\"}\n",
        "\n",
        ". . .\n",
        "\n",
        "### Podemos rastrear dónde y cuándo se producen los errores\n",
        "\n",
        "![](imagenes/pikachu.png){fig-align=\"center\" width=\"250\"}\n",
        "\n",
        "---\n",
        "\n",
        "## Estados en Git \n",
        "\n",
        "![](imagenes/estados-git.png){fig-align=\"center\" width=\"500\"}\n",
        "\n",
        "Tenemos 3 estados para nuestros archivos:\n",
        "\n",
        "- Modificado\n",
        "- \"En escena\" (*staging area*)\n",
        "- Confirmado o comprometido (*committed*)\n",
        "\n",
        "---\n",
        "\n",
        "## Principales conceptos {.medium-par}\n",
        "\n",
        "::: {.incremental}\n",
        "- Ciclos sucesivos de *modificar, poner en escena y confirmar* van generando el historial de cambios de nuestro repositorio\n",
        "- Cada _commit_ es una foto del estado de nuestros archivos a la que podemos acceder cuando queramos\n",
        "- **NO** podemos acceder a estados intermedios entre dos _commit_\n",
        "- Queremos hacer _commit_ frecuentemente y con un número de cambios manejable\n",
        "- Si quiero trabajar de manera individual, no necesito más que lo que hemos visto hasta ahora\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "**¿Qué pasa si necesito trabajar con más personas?**\n",
        "\n",
        "---\n",
        "\n",
        "## Principales conceptos {.medium-par .nostretch}\n",
        "\n",
        "![](imagenes/diagrama-git.png){fig-align=\"center\" width=\"50%\"}\n",
        "\n",
        ". . .\n",
        "\n",
        "Git puede funcionar sin problemas de manera local\n",
        "\n",
        "Gitlab, Github, etc se usan para trabajar con más personas\n",
        "\n",
        "---\n",
        "\n",
        "## Principales conceptos \n",
        "\n",
        "![](imagenes/flujo_git.png){fig-align=\"center\" width=\"45%\"}\n",
        "\n",
        "::: {.aside}\n",
        "Ilustración por Allison Horst, https://allisonhorst.com/git-github\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Repositorio remoto \n",
        "\n",
        "![](imagenes/diagrama-colaborativo.png){fig-align=\"center\" width=\"600\"}\n",
        "\n",
        ". . .\n",
        "\n",
        "### Varias personas aportan a un mismo repositorio\n",
        "\n",
        "::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "![](imagenes/logos.png){width=\"400\"}\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "![](imagenes/logo_distinto.png){width=\"700\"}\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Esquema de trabajo en Git \n",
        "\n",
        "![](https://i.gifer.com/2DAN.gif){fig-align=\"center\" width=\"450\"}\n",
        "\n",
        "Los commit nos permiten sujetarnos a la roca \n",
        "\n",
        ". . .\n",
        "\n",
        "En terreno peligroso, es mejor hacer más commits.  \n",
        "\n",
        ". . .\n",
        "\n",
        "Si nos caemos, tendremos un punto del cual sujetarnos\n",
        "\n",
        "---\n",
        "\n",
        "## Esquema de trabajo en Git \n",
        "\n",
        "::: {.incremental}\n",
        "- Luego de hacer nuestros _commit_, usualmente vamos a querer enviarlos al repositorio remoto para que el resto pueda verlos a través de un _push_\n",
        "- Antes de hacer un _push_, es necesario actualizar nuestro proyecto con los cambios que otros/as colegas puedan haber realizado desde la última vez que nos sincronizamos con el repositorio remoto. Para esto, usamos `git pull`\n",
        "- Si es que fue posible traer los cambios remotos **sin problemas** y teniendo seguridad que nuestro código funciona, procedemos a empujar nuestros cambios con un `git push`\n",
        ":::\n",
        "\n",
        "::: fragment\n",
        "\n",
        "Por lo tanto, el flujo normal de trabajo es siempre:\n",
        ":::\n",
        "\n",
        "::: fragment\n",
        "### commit - pull - push\n",
        ":::\n",
        "\n",
        ":::: fragment\n",
        "::: {.columns}\n",
        "\n",
        "::: {.column width=\"35%\"}\n",
        "![](imagenes/no_olvidar.png){width=30%}\n",
        ":::\n",
        "\n",
        "::: {.column width=\"35%\"}\n",
        "\n",
        "**Probemos nuestro primer flujo `git`!**\n",
        ":::\n",
        "\n",
        ":::\n",
        "::::\n",
        "---\n",
        "\n",
        "## ¿Sin problemas? {.medium-par}\n",
        "\n",
        "::: {.incremental}\n",
        "- Al hacer `pull` traemos los cambios que han hecho el resto de colegas a nuestro repositorio local y `git` trata de incorporarlo con los `commit` que hemos realizado desde la última vez que hicimos `pull`. A esto se le llama `merge`.\n",
        "- Si los cambios que existen en nuestros `commit` no tienen intersección con los de los `commit` de nuestros colegas, no habrá problema. Dos casos:\n",
        "  - Cambios en archivos diferentes\n",
        "  - Cambios en el mismo archivo, pero distintas líneas\n",
        "- Ahora, si nuestros `commit` y algún `commit` recibido en el `pull` cambian la misma línea de un archivo, tendremos [problemas]{.fragment .highlight-red}: un conflicto de _merge_.\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "![](imagenes/git_merge.gif){fig-align=\"center\" width=\"30%\"}\n",
        "\n",
        ". . .\n",
        "\n",
        "**Probemos cómo generar y resolver un conflicto de merge**\n",
        "\n",
        "---\n",
        "\n",
        "## Conflicto de merge {.medium-par}\n",
        "\n",
        ":::: {.columns}\n",
        "\n",
        "::: {.column width=\"15%\"}\n",
        "![](imagenes/merge_conflict1.png){width=100%}\n",
        ":::\n",
        "\n",
        "::: {.column width=\"85%\"}\n",
        "← Su script se verá similar a esto\n",
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        ". . .\n",
        "\n",
        "Básicamente `git` nos muestra cómo están las líneas que tienen cambios simultáneos en nuestro repositorio y en el script en el repositorio remoto. \n",
        "\n",
        "Aquí debemos editar el script para que quede funcional, de acuerdo a los objetivos del proyecto y del script. Para esto no existe receta, podrían mantenerse ambos cambios, uno de los dos o ninguno:\n",
        "\n",
        ". . .\n",
        "\n",
        "![](imagenes/merge_conflict2.png){fig-align=\"center\" width=\"75%\"}\n",
        "\n",
        ". . .\n",
        "\n",
        "Luego de editar el script, es necesario realizar un `commit` y luego un `push` con lo que se soluciona el conflicto de `merge`.\n",
        "\n",
        ". . .\n",
        "\n",
        "::: {.callout-important}\n",
        "**Nota importante:** cuando hacemos un `pull` con conflicto de `merge`, nos aparecerán todos los cambios al repositorio que ha habido desde la última vez que hicimos `pull` en la pestaña Git. Solo debemos preocuparnos por los archivos que aparezcan con un símbolo de \"U\", que implican que ese archivo específico tiene conflicto de merge.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Conflicto de merge \n",
        "\n",
        "Ejemplo de lo anterior:\n",
        "\n",
        "![](imagenes/merge_conflict3.png){fig-align=\"center\" width=\"85%\"}\n",
        "\n",
        "La terminal también nos indicará los archivos con conflicto:\n",
        "\n",
        "![](imagenes/merge_conflict4.png){fig-align=\"center\" width=\"85%\"}\n",
        "\n",
        "---\n",
        "\n",
        "## El árbol de commits {.small-par}\n",
        "\n",
        "::::: {.columns}\n",
        "\n",
        ":::: {.column width=\"50%\"}\n",
        "\n",
        "::: fragment\n",
        "El árbol de commits es una representación visual de la historia de nuestro proyecto.\n",
        ":::\n",
        "\n",
        "::: fragment\n",
        "Nos muestra cada commit, nos permite acceder a sus contenidos y nos muestra dónde nos encontramos actualmente en la historia del árbol y dónde se encuentran las otras ramas, en caso de existir.\n",
        ":::\n",
        "\n",
        "::: fragment\n",
        "**¿Qué es una rama?**\n",
        ":::\n",
        "\n",
        "\n",
        "::: fragment\n",
        "Simplemente es un puntero a un `commit` específico, que contiene la información de sus ancestros.\n",
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "![](imagenes/arbol_commit1.gif){width=\"42%\"}\n",
        ":::\n",
        "\n",
        ":::::\n",
        "---\n",
        "\n",
        "## El árbol de commits {.small-par}\n",
        "\n",
        "::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "::: {.small}\n",
        "El árbol de commits es una representación visual de la historia de nuestro proyecto.\n",
        "\n",
        "Nos muestra cada commit, nos permite acceder a sus contenidos y nos muestra dónde nos encontramos actualmente en la historia del árbol y dónde se encuentran las otras ramas, en caso de existir.\n",
        "\n",
        "**¿Qué es una rama?**\n",
        "\n",
        "Simplemente es un puntero a un `commit` específico, que contiene la información de sus ancestros.\n",
        "\n",
        "Si nos encontramos parados en una rama y realizamos un `commit` el puntero de la rama se moverá al commit más reciente.\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "![](imagenes/arbol_commit2.gif){width=42%}\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## El árbol de commits {.small-par}\n",
        "\n",
        "::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "::: {.small}\n",
        "El árbol de commits es una representación visual de la historia de nuestro proyecto.\n",
        "\n",
        "Nos muestra cada commit, nos permite acceder a sus contenidos y nos muestra dónde nos encontramos actualmente en la historia del árbol y dónde se encuentran las otras ramas, en caso de existir.\n",
        "\n",
        "**¿Qué es una rama?**\n",
        "\n",
        "Simplemente es un puntero a un `commit` específico, que contiene la información de sus ancestros.\n",
        "\n",
        "Si nos encontramos parados en una rama y realizamos un `commit` el puntero de la rama se moverá al commit más reciente.\n",
        "\n",
        "La rama principal se llama main o master, que aloja la versión oficial de nuestro proyecto, pero podemos crear tantas como queramos\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "![](imagenes/arbol_commit3.gif){width=\"42%\"}\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## El árbol de commits {.small-par}\n",
        "\n",
        "::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "::: {.small}\n",
        "El árbol de commits es una representación visual de la historia de nuestro proyecto.\n",
        "\n",
        "Nos muestra cada commit, nos permite acceder a sus contenidos y nos muestra dónde nos encontramos actualmente en la historia del árbol y dónde se encuentran las otras ramas, en caso de existir.\n",
        "\n",
        "**¿Qué es una rama?**\n",
        "\n",
        "Simplemente es un puntero a un `commit` específico, que contiene la información de sus ancestros.\n",
        "\n",
        "Si nos encontramos parados en una rama y realizamos un `commit` el puntero de la rama se moverá al commit más reciente.\n",
        "\n",
        "La rama principal se llama main o master, que aloja la versión oficial de nuestro proyecto, pero podemos crear tantas como queramos\n",
        "\n",
        "Todo software presenta alguna forma de acceder a este árbol; en el caso de Rstudio nos da acceso en Tools → Version control → History.\n",
        "\n",
        "::: fragment\n",
        "**¡Veamos el árbol de _commits_ de nuestro proyecto actual!**\n",
        ":::\n",
        "\n",
        "\n",
        ":::\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "![](imagenes/arbol_commit4.gif){width=\"42%\"}\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Trabajando con ramas \n",
        "\n",
        "::: {.incremental}\n",
        "- Es la forma más segura de trabajar en git: nuestro trabajo no tocará la rama principal hasta que lo decidamos\n",
        "- Cada desarrollador puede trabajar en una rama independiente, sin molestar a los demás\n",
        "- En proyectos grandes, los desarrolladores **en general** no tienen permiso para empujar directamente a la rama main/master, tienen que \"pedir permiso\" para hacerlo\n",
        "- Existe un administrador encargado de revisar y unir (`merge`) las contribuciones a la rama central\n",
        "  - Decide si el aporte debe incorporarse \n",
        "  - Resuelve conflictos\n",
        "- Por ahora nos centraremos en el caso básico en que tenemos total libertad de hacer `commit`, `push` y `pull`\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "**¡Creemos nuestras primeras ramas!**\n",
        "\n",
        "---\n",
        "\n",
        "## El .gitignore {.medium-par}\n",
        "\n",
        "::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "::: fragment\n",
        "Cuando trabajamos con repositorios remotos, muchas veces existen archivos que queremos mantener solo en nuestro computador o que no son realmente compatibles con un repositorio git, por lo que no queremos subirlos a la nube:\n",
        ":::\n",
        "\n",
        "::: {.incremental}\n",
        "- Archivos que no son pertinentes al objetivo del proyecto.\n",
        "- Archivos temporales y de caché.\n",
        "- Archivos personales (por ejemplo, .Rprofile, scripts de pruebas).\n",
        "- Archivos muy grandes (por ejemplo, tablas de datos pesadas).\n",
        ":::\n",
        "\n",
        "\n",
        "::: fragment\n",
        "Estos los anotamos en el archivo .gitignore, que es un archivo de texto simple.\n",
        ":::\n",
        "\n",
        ":::fragment\n",
        "**Importante:** .gitignore tiene algunas notaciones particulares, pero lo más relevante es que el * sirve como comodín\n",
        ":::\n",
        "\n",
        "::: fragment\n",
        "**¡Hagamos pruebas de uso del .gitignore!**\n",
        ":::\n",
        ":::\n",
        "::: {.column width=\"50%\"}\n",
        "![](imagenes/gitignore.png){width=\"60%\"}\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Recomendaciones sobre cómo interactuar con git \n",
        "\n",
        "Revisamos cómo interactuar con git a través de la terminal y RStudio\n",
        "\n",
        ". . .\n",
        "\n",
        "**¿Cuál es mejor?**\n",
        "\n",
        ". . .\n",
        "\n",
        "No hay una respuesta correcta, depende de cada persona. La botonera es más sencilla, pero, por lo mismo, más incompleta y menos transparente.\n",
        "\n",
        ". . .\n",
        "\n",
        "Recomendación general: si es que les acomoda, para operaciones más sencillas (`add`, `commit`, `push`, `pull`), la botonera de RStudio basta. Si queremos dar un uso más avanzado, la terminal puede darnos más control.\n",
        "\n",
        ". . .\n",
        "\n",
        "Existen alternativas intermedias como GitKraken, que proporcionan una interfaz de usuario enfocada en git, permitiendo más operaciones que las posibles en la botonera de RStudio. Tarea para la casa.\n",
        "\n",
        "---\n",
        "\n",
        "## Torpedo \n",
        "\n",
        "::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "**git add .**: poner todo en escena\n",
        "\n",
        "**git commit -m \"mensaje personalizado\"**: confirmar cambios\n",
        "\n",
        "**git push nombre_rama**: empujar a rama remota\n",
        "\n",
        "**git clone url_repositorio**: clonar un repositorio\n",
        "\n",
        "**git pull nombre_rama**: traer cosas del repositorio\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "**git checkout nombre_rama**: ir a una rama\n",
        "\n",
        "**git branch**: ver todas las ramas\n",
        "\n",
        "**git branch nombre_rama**: crear una rama\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "# Orquestadores con Targets\n",
        "![](imagenes/logo_targets.png){width=\"150\"}\n",
        "\n",
        "---\n",
        "\n",
        "## ¿Qué es un orquestador? \n",
        "\n",
        "::: incremental\n",
        "- Es una herramienta que maneja y coordina flujos de trabajo complejos.\n",
        "\n",
        "- Se suelen utilizar en flujos de **procesamiento y analítica de datos**, ingeniería de datos,\n",
        "machine learning.\n",
        "\n",
        "\n",
        "- Se preocupa de que el flujo de trabajo:\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=\"50%\"}\n",
        "  - Corra cada paso en el orden correcto.\n",
        "  - Corra cuando queramos que corra.\n",
        "  - Se hace cargo de errores y reintentos.\n",
        "  \n",
        ":::\n",
        "  \n",
        "::: {.column width=\"50%\"}\n",
        "  - Deja logs de sus estados ejecución (error/éxito).\n",
        "  - Pueden ser monitoreados y debuggeados.\n",
        "  \n",
        ":::\n",
        "  \n",
        "::::\n",
        "\n",
        ":::\n",
        "\n",
        "![](imagenes/orquestador.png){width=80%}\n",
        "\n",
        "---\n",
        "\n",
        "## ¿Qué es targets?\n",
        "\n",
        "::: incremental\n",
        "- Targets es un orquestador diseñado específicamente para estadística y ciencia de datos en R.\n",
        "\n",
        "- Está basado en la tecnología [Make](https://www.gnu.org/software/make/).\n",
        "\n",
        "- Permite evitar operaciones costosas innecesarias -> sabe qué piezas del código han cambiado desde la última vez\n",
        "que se corrió el _pipeline_ y, por lo tanto, cuáles son necesarias de correr y cuáles no.\n",
        "\n",
        "- `targets` nos ahorra tiempo y ordena el proyecto.\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "![](imagenes/targets_pipeline.png){width=45%}\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Conceptos clave\n",
        "\n",
        "::: incremental\n",
        "\n",
        "1. `_targets.R`: aquí definimos el pipeline del proyecto.\n",
        "    - Básicamente acá se define toda la secuencialidad del proyecto.\n",
        "\n",
        "2. `tar_target()`: define una unidad de trabajo\n",
        "\n",
        "3. **DAG**: grafo dirigido acíclico de dependencias, por sus siglas en inglés. Es la imagen de la diapo anterior\n",
        "   - Muestra cómo es la interdependendencia entre cada etapa del procesamiento. \n",
        ":::\n",
        "\n",
        "\n",
        "![](imagenes/targets_pipeline.png){width=45%}\n",
        "\n",
        "---\n",
        "\n",
        "## Implementando en R\n",
        "\n",
        "Desarrollaremos un ejemplo con una estructura extra básica:\n",
        "\n",
        "``` {text}\n",
        "\n",
        "su_proyecto/\n",
        "├── data.csv               # archivo de datos del proyecto\n",
        "├── functions.R            # funciones asociadas al proyecto\n",
        "└── _targets.R             # Definición del pipeline\n",
        "\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Material de consulta \n",
        "\n",
        "[Guía muy completa en español](https://git-scm.com/book/es/v2)\n",
        "\n",
        "[Git con enfoque en R](https://happygitwithr.com/)\n",
        "\n",
        "---\n",
        "\n",
        "## {#title-slide-end .center}\n",
        "\n",
        "![](imagenes/logo_portada2.png){width=\"200\"}\n",
        "\n",
        "### Reproducibilidad II: control de versiones y orquestadores\n",
        "\n",
        "### Unidad de Gobierno de Datos\n",
        "\n",
        "#### Julio 2025\n",
        "\n",
        "---\n",
        "\n",
        "## Ejemplo de uso \n",
        "\n",
        "![](imagenes/esquema_git.png){fig-align=\"center\" width=\"800\"}"
      ],
      "id": "8f06c56e"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\jeconchao\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}